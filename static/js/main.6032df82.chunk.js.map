{"version":3,"sources":["logo.svg","Pokedex.js","constants.js","Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Pokedex","props","history","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","results","data","newPokemonData","forEach","pokemon","index","id","name","sprite","toFirstCharUppercase","charAt","toUpperCase","slice","className","src","logo","alt","type","onChange","e","target","value","placeholder","href","Grid","container","spacing","Object","keys","map","pokemonId","includes","onClick","push","getPokemonCard","Pokemon","match","params","undefined","setPokemon","catch","error","CircularProgress","species","height","weight","types","sprites","abilities","stats","console","log","front_default","typeInfo","idx","abilityInfo","ability","statsInfo","stat","base_stat","generatePokemonJSX","to","App","exact","path","render","Boolean","window","location","hostname","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6032df82.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.41cda45e.svg\";","import React, { useState, useEffect } from 'react';\r\nimport './index.css';\r\nimport'./App.css';\r\nimport logo from './logo.svg';\r\nimport axios from 'axios';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst Pokedex = (props) => {\r\n    const { history } = props;\r\n    const [pokemonData, setPokemonData] = useState({});\r\n    const [filter, setFilter] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        axios\r\n        .get(`https://pokeapi.co/api/v2/pokemon?limit=807`)\r\n        .then(function (response) {\r\n            const { data } = response;\r\n            const { results } = data;\r\n            const newPokemonData = {};\r\n            results.forEach((pokemon, index) => {\r\n            newPokemonData[index + 1] = {\r\n                id: index + 1,\r\n                name: pokemon.name,\r\n                sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\r\n                index + 1\r\n                }.png`,\r\n            };\r\n            });\r\n            setPokemonData(newPokemonData);\r\n        });\r\n    }, []);\r\n\r\n    const handleSearchChange = (e) => {\r\n        setFilter(e.target.value);\r\n      };\r\n\r\n    const toFirstCharUppercase = (name) => {\r\n         return name.charAt(0).toUpperCase() + name.slice(1)\r\n      };\r\n\r\n    const getPokemonCard = (pokemonId) => {\r\n        const { id, name, sprite } = pokemonData[pokemonId];\r\n    return (\r\n        <div className=\"container\">\r\n            <div className='card' onClick={() => history.push(`/${id}`)}>\r\n                <div className=\"button-id\">{`${id}`}</div>\r\n                <img src={sprite}></img>\r\n                <div className='card-name'>{`${toFirstCharUppercase(name)}`}</div>\r\n                <div className='card-types'></div>\r\n            </div>\r\n        </div>\r\n    )};\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n        <header>\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <form > \r\n            <label>\r\n                <input\r\n                type=\"text\"\r\n                onChange={handleSearchChange}\r\n                placeholder=\"Pesquise por nome\"\r\n                />\r\n            </label>\r\n            </form>\r\n\r\n            <div id=\"button-container\">\r\n    \r\n            <a href=\"https://youtu.be/dQw4w9WgXcQ\">\r\n            <button id=\"surpreenda-me\" className=\"button\">Surpreenda-me!</button>\r\n            </a>\r\n            </div>\r\n        </header>\r\n\r\n        <body className='card-grid'>\r\n            <Grid container spacing={2}>\r\n            {Object.keys(pokemonData).map(\r\n                (pokemonId) =>\r\n                pokemonData[pokemonId].name.includes(filter) &&\r\n                getPokemonCard(pokemonId)\r\n            )}\r\n            </Grid>\r\n        </body>\r\n\r\n        </div>\r\n        );\r\n};\r\n\r\nexport default Pokedex;","export const toFirstCharUppercase = name =>\r\n  name.charAt(0).toUpperCase() + name.slice(1);","import React, { useEffect, useState } from \"react\";\r\nimport './index.css';\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { toFirstCharUppercase } from \"./constants\";\r\nimport axios from \"axios\";\r\nimport { Link } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nconst Pokemon = (props) => {\r\n  const { match } = props;\r\n  const { params } = match;\r\n  const { pokemonId } = params;\r\n  const [pokemon, setPokemon] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        setPokemon(data);\r\n      })\r\n      .catch(function (error) {\r\n        setPokemon(false);\r\n      });\r\n  }, [pokemonId]);\r\n\r\n  const generatePokemonJSX = (pokemon) => {\r\n    const { name, id, species, height, weight, types, sprites, abilities, stats} = pokemon;\r\n    console.log(pokemon);\r\n    const fullImageUrl = `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${id}.png`;\r\n    const { front_default } = sprites;\r\n    return (\r\n      <div className='maiorDeTodos'>\r\n        <div className= \"primeira-tela\">\r\n              <div className= \"info-container\">    \r\n                  <div className= \"namenum\">\r\n                      <span id = \"name\">{toFirstCharUppercase(name)}</span>\r\n                      <span id = \"num\">{` NÂº ${id}`}</span>\r\n                  </div>\r\n\r\n                  <div className= \"species\">\r\n                        {`Species: ${species.name}`}\r\n                  </div>\r\n\r\n                  <div className= \"type\">\r\n                        <p>Type</p>\r\n                        <div className = \"each-type\">\r\n                              {types.map((typeInfo, idx) => {\r\n                              const { type } = typeInfo;\r\n                              const { name } = type;\r\n                              return <div id= \"type\" key={idx}> <p>{name}</p> </div>\r\n                              })}\r\n                        </div>\r\n                  </div>\r\n              </div>\r\n\r\n              <div className = \"pokeimg\"><img src={front_default} alt=\"pokemon\"></img></div>\r\n              </div>\r\n            \r\n            <div className='segunda-tela'>\r\n            <div className =\"quadro\">\r\n                <div className =\"caracteristica\">\r\n                    {`Height: ${height} ft`}\r\n                </div>\r\n                <div className =\"caracteristica\">\r\n                  {`Weight: ${weight} lbs`}\r\n                </div>\r\n              \r\n                <div className =\"abilities\">\r\n                  <p id=\"abilities-title\">Abilities:</p>\r\n                  {abilities.map((abilityInfo, idx) => {\r\n                              const { ability } = abilityInfo;\r\n                              const { name } = ability;\r\n                              return <div id= \"abilities-container\" key={idx}><p id='ability'>{name}</p></div>\r\n                              })}\r\n                \r\n                </div>\r\n                </div>\r\n              \r\n              <div className='quadro'>\r\n              <div className='stats'>\r\n              {stats.map((statsInfo, idx) => {\r\n                              const { stat } = statsInfo;\r\n                              const { base_stat } = statsInfo;\r\n                              const { name } = stat;\r\n                              return (\r\n                              <>\r\n                              <div id= \"stat\" key={idx}><p>{name}: {base_stat}</p></div>\r\n                              </>\r\n                              );\r\n                              })}\r\n              </div>\r\n            </div>\r\n            </div>\r\n            \r\n            {/* <div className='evolution-container'>\r\n              <div className='evolution'><img src={`http://pokeapi.co/media/sprites/pokemon/${id}.png`}></img></div>\r\n              <div className='evolution' src={`http://pokeapi.co/media/sprites/pokemon/${id+1}.png`}></div>\r\n              <div className='evolution'></div>\r\n            </div>\r\n            */}\r\n\r\n      </div>\r\n    )\r\n};\r\n\r\nreturn (\r\n    <>\r\n      {pokemon === undefined && <CircularProgress />}\r\n      {pokemon !== undefined && pokemon && generatePokemonJSX(pokemon)}\r\n      {pokemon === false && <p> Pokemon not found</p>}\r\n\r\n      {pokemon !== undefined && (\r\n        <div className='button' id='voltar'>\r\n        <Link to=\"/\">Voltar</Link>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pokemon;","import React from 'react';\nimport Pokedex from './Pokedex';\nimport Pokemon from './Pokemon';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\n\nconst App = (props) => {\n  return (\n    <BrowserRouter>\n    <Switch>\n      <Route exact path ='/' render={(props) => <Pokedex {...props} />} />\n      <Route path= '/:pokemonId' render={(props)=> <Pokemon {...props} />} />\n    </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n\n","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}